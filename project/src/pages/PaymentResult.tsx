import React, { useEffect, useState } from 'react';
import { 
  CheckCircle, 
  XCircle, 
  Crown, 
  Calendar,
  ArrowRight,
  Loader2,
  Home,
  User,
  RefreshCw
} from 'lucide-react';

// Success Page Component
const PaymentSuccessPage: React.FC = () => {
  const [subscriptionData, setSubscriptionData] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string>('');

  useEffect(() => {
    // Get subscription ID from URL params
    const urlParams = new URLSearchParams(window.location.search);
    const subscriptionId = urlParams.get('subscriptionId');
    
    if (subscriptionId) {
      fetchSubscriptionDetails(subscriptionId);
    } else {
      // Try to get from pending payment
      checkPendingPayment();
    }
  }, []);

  const fetchSubscriptionDetails = async (subscriptionId: string) => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        setError('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem th√¥ng tin');
        setLoading(false);
        return;
      }

      const response = await fetch(`/api/subscription/user-subscription`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        if (data.isSuccess && data.result) {
          setSubscriptionData(data.result);
          // Clear pending payment since it's successful
          localStorage.removeItem('pendingPayment');
        } else {
          setError('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin subscription');
        }
      } else if (response.status === 401) {
        setError('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n');
        localStorage.removeItem('token');
        setTimeout(() => window.location.href = '/login', 2000);
      } else {
        setError('C√≥ l·ªói x·∫£y ra khi t·∫£i th√¥ng tin');
      }
    } catch (error) {
      console.error('Error fetching subscription details:', error);
      setError('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server');
    } finally {
      setLoading(false);
    }
  };

  const checkPendingPayment = () => {
    try {
      const pendingPayment = localStorage.getItem('pendingPayment');
      if (pendingPayment) {
        const paymentInfo = JSON.parse(pendingPayment);
        setSubscriptionData({
          planName: paymentInfo.planName,
          amount: paymentInfo.amount,
          billingCycle: paymentInfo.billingCycle,
          startDate: new Date().toISOString(),
          endDate: paymentInfo.billingCycle === 'Yearly' 
            ? new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString()
            : new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
          subscriptionId: paymentInfo.transactionRef || 'PENDING'
        });
        localStorage.removeItem('pendingPayment');
      } else {
        setError('Kh√¥ng t√¨m th·∫•y th√¥ng tin thanh to√°n');
      }
    } catch (error) {
      setError('L·ªói x·ª≠ l√Ω th√¥ng tin thanh to√°n');
    } finally {
      setLoading(false);
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('vi-VN', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(price);
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-green-50 to-emerald-100 flex items-center justify-center">
        <div className="text-center">
          <Loader2 className="w-12 h-12 animate-spin text-green-600 mx-auto mb-4" />
          <p className="text-gray-600">ƒêang t·∫£i th√¥ng tin subscription...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-red-50 to-pink-100 flex items-center justify-center">
        <div className="bg-white rounded-2xl shadow-xl p-8 text-center max-w-md">
          <XCircle className="w-16 h-16 text-red-600 mx-auto mb-4" />
          <h2 className="text-2xl font-bold text-gray-900 mb-4">C√≥ l·ªói x·∫£y ra</h2>
          <p className="text-gray-600 mb-6">{error}</p>
          <div className="flex gap-4 justify-center">
            <button 
              onClick={() => window.location.href = '/membership'}
              className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700"
            >
              Th·ª≠ l·∫°i
            </button>
            <button 
              onClick={() => window.location.href = '/'}
              className="bg-gray-100 text-gray-900 px-6 py-2 rounded-lg hover:bg-gray-200"
            >
              V·ªÅ trang ch·ªß
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-emerald-100 py-12">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="bg-white rounded-2xl shadow-xl p-8 text-center">
          {/* Success Icon */}
          <div className="w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6">
            <CheckCircle className="w-12 h-12 text-green-600" />
          </div>

          {/* Success Message */}
          <h1 className="text-4xl font-bold text-gray-900 mb-4">
            Thanh to√°n th√†nh c√¥ng! üéâ
          </h1>
          <p className="text-xl text-gray-600 mb-8">
            Ch√∫c m·ª´ng! B·∫°n ƒë√£ ƒëƒÉng k√Ω membership th√†nh c√¥ng. T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c n√¢ng c·∫•p.
          </p>

          {/* Subscription Details */}
          {subscriptionData && (
            <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl p-6 mb-8">
              <div className="flex items-center justify-center mb-4">
                <Crown className="w-8 h-8 text-purple-600 mr-3" />
                <h2 className="text-2xl font-bold text-gray-900">
                  G√≥i {subscriptionData.planName}
                </h2>
              </div>
              
              <div className="grid md:grid-cols-2 gap-6 text-left">
                <div className="space-y-3">
                  <div className="flex justify-between">
                    <span className="text-gray-600">M√£ subscription:</span>
                    <span className="font-medium">{subscriptionData.subscriptionId}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Chu k·ª≥ thanh to√°n:</span>
                    <span className="font-medium">
                      {subscriptionData.billingCycle === 'Monthly' ? 'H√†ng th√°ng' : 'H√†ng nƒÉm'}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Ph∆∞∆°ng th·ª©c:</span>
                    <span className="font-medium">{subscriptionData.paymentMethod}</span>
                  </div>
                </div>
                
                <div className="space-y-3">
                  <div className="flex justify-between">
                    <span className="text-gray-600">Ng√†y b·∫Øt ƒë·∫ßu:</span>
                    <span className="font-medium">{formatDate(subscriptionData.startDate)}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Ng√†y h·∫øt h·∫°n:</span>
                    <span className="font-medium">{formatDate(subscriptionData.endDate)}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">S·ªë ti·ªÅn:</span>
                    <span className="font-bold text-green-600">
                      {formatPrice(subscriptionData.amount)}
                    </span>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Benefits */}
          <div className="bg-gray-50 rounded-xl p-6 mb-8">
            <h3 className="text-xl font-bold text-gray-900 mb-4">
              Quy·ªÅn l·ª£i b·∫°n nh·∫≠n ƒë∆∞·ª£c:
            </h3>
            <div className="grid md:grid-cols-2 gap-4 text-left">
              <div className="flex items-center">
                <CheckCircle className="w-5 h-5 text-green-600 mr-3" />
                <span>ƒê·∫∑t l·ªãch h·∫πn ∆∞u ti√™n</span>
              </div>
              <div className="flex items-center">
                <CheckCircle className="w-5 h-5 text-green-600 mr-3" />
                <span>Chat kh√¥ng gi·ªõi h·∫°n v·ªõi b√°c sƒ©</span>
              </div>
              <div className="flex items-center">
                <CheckCircle className="w-5 h-5 text-green-600 mr-3" />
                <span>Video call t∆∞ v·∫•n</span>
              </div>
              <div className="flex items-center">
                <CheckCircle className="w-5 h-5 text-green-600 mr-3" />
                <span>B√°o c√°o s·ª©c kh·ªèe chi ti·∫øt</span>
              </div>
            </div>
          </div>

          {/* Next Steps */}
          <div className="bg-blue-50 rounded-xl p-6 mb-8">
            <h3 className="text-xl font-bold text-gray-900 mb-4">
              B∆∞·ªõc ti·∫øp theo:
            </h3>
            <div className="space-y-3">
              <div className="flex items-center justify-center">
                <Calendar className="w-5 h-5 text-blue-600 mr-3" />
                <span>ƒê·∫∑t l·ªãch h·∫πn ƒë·∫ßu ti√™n v·ªõi b√°c sƒ©</span>
              </div>
              <div className="flex items-center justify-center">
                <User className="w-5 h-5 text-blue-600 mr-3" />
                <span>C·∫≠p nh·∫≠t th√¥ng tin h·ªì s∆° y t·∫ø</span>
              </div>
              <div className="flex items-center justify-center">
                <CheckCircle className="w-5 h-5 text-blue-600 mr-3" />
                <span>Ki·ªÉm tra email x√°c nh·∫≠n ƒë√£ g·ª≠i</span>
              </div>
            </div>
          </div>

          {/* Action Buttons */}
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <button 
              onClick={() => window.location.href = '/appointments'}
              className="bg-blue-600 text-white px-8 py-3 rounded-lg font-medium hover:bg-blue-700 transition-all flex items-center justify-center"
            >
              <Calendar className="w-5 h-5 mr-2" />
              ƒê·∫∑t l·ªãch h·∫πn ngay
            </button>
            <button 
              onClick={() => window.location.href = '/profile'}
              className="bg-gray-100 text-gray-900 px-8 py-3 rounded-lg font-medium hover:bg-gray-200 transition-all flex items-center justify-center"
            >
              <User className="w-5 h-5 mr-2" />
              Xem h·ªì s∆°
            </button>
            <button 
              onClick={() => window.location.href = '/'}
              className="bg-white text-gray-600 px-8 py-3 rounded-lg font-medium border hover:bg-gray-50 transition-all flex items-center justify-center"
            >
              <Home className="w-5 h-5 mr-2" />
              V·ªÅ trang ch·ªß
            </button>
          </div>

          {/* Email Notice */}
          <div className="mt-8 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
            <p className="text-yellow-800">
              üìß Email x√°c nh·∫≠n ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn h·ªôp th∆∞ c·ªßa b·∫°n. Vui l√≤ng ki·ªÉm tra ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

// Failed Page Component
const PaymentFailedPage: React.FC = () => {
  const [errorMessage, setErrorMessage] = useState<string>('');

  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const error = urlParams.get('error');
    setErrorMessage(error || 'C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh thanh to√°n');
  }, []);

  const getErrorMessage = (error: string) => {
    switch (error) {
      case 'user_cancel':
        return 'B·∫°n ƒë√£ h·ªßy b·ªè giao d·ªãch';
      case 'insufficient_balance':
        return 'S·ªë d∆∞ t√†i kho·∫£n kh√¥ng ƒë·ªß';
      case 'invalid_card':
        return 'Th√¥ng tin th·∫ª kh√¥ng h·ª£p l·ªá';
      case 'expired_card':
        return 'Th·∫ª ƒë√£ h·∫øt h·∫°n';
      case 'system_error':
        return 'L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau';
      case 'payment_timeout':
        return 'Giao d·ªãch h·∫øt th·ªùi gian ch·ªù';
      default:
        return 'Thanh to√°n kh√¥ng th√†nh c√¥ng';
    }
  };

  const handleRetryPayment = () => {
    window.location.href = '/membership';
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-red-50 to-pink-100 py-12">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="bg-white rounded-2xl shadow-xl p-8 text-center">
          {/* Error Icon */}
          <div className="w-20 h-20 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-6">
            <XCircle className="w-12 h-12 text-red-600" />
          </div>

          {/* Error Message */}
          <h1 className="text-4xl font-bold text-gray-900 mb-4">
            Thanh to√°n th·∫•t b·∫°i
          </h1>
          <p className="text-xl text-gray-600 mb-2">
            {getErrorMessage(errorMessage)}
          </p>
          <p className="text-gray-500 mb-8">
            ƒê·ª´ng lo l·∫Øng, b·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i ho·∫∑c ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n kh√°c.
          </p>

          {/* Error Details */}
          <div className="bg-red-50 rounded-xl p-6 mb-8">
            <h3 className="text-lg font-bold text-red-900 mb-4">
              Chi ti·∫øt l·ªói:
            </h3>
            <p className="text-red-800">{errorMessage}</p>
          </div>

          {/* Troubleshooting */}
          <div className="bg-gray-50 rounded-xl p-6 mb-8 text-left">
            <h3 className="text-xl font-bold text-gray-900 mb-4">
              C√°ch kh·∫Øc ph·ª•c:
            </h3>
            <ul className="space-y-2">
              <li className="flex items-start">
                <CheckCircle className="w-5 h-5 text-blue-600 mr-3 mt-0.5" />
                <span>Ki·ªÉm tra s·ªë d∆∞ t√†i kho·∫£n ho·∫∑c th√¥ng tin th·∫ª</span>
              </li>
              <li className="flex items-start">
                <CheckCircle className="w-5 h-5 text-blue-600 mr-3 mt-0.5" />
                <span>Th·ª≠ ph∆∞∆°ng th·ª©c thanh to√°n kh√°c (VNPay/MoMo)</span>
              </li>
              <li className="flex items-start">
                <CheckCircle className="w-5 h-5 text-blue-600 mr-3 mt-0.5" />
                <span>Ki·ªÉm tra k·∫øt n·ªëi internet</span>
              </li>
              <li className="flex items-start">
                <CheckCircle className="w-5 h-5 text-blue-600 mr-3 mt-0.5" />
                <span>Li√™n h·ªá ng√¢n h√†ng n·∫øu th·∫ª b·ªã kh√≥a</span>
              </li>
            </ul>
          </div>

          {/* Action Buttons */}
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <button 
              onClick={handleRetryPayment}
              className="bg-blue-600 text-white px-8 py-3 rounded-lg font-medium hover:bg-blue-700 transition-all flex items-center justify-center"
            >
              <RefreshCw className="w-5 h-5 mr-2" />
              Th·ª≠ l·∫°i thanh to√°n
            </button>
            <button 
              onClick={() => window.location.href = '/contact'}
              className="bg-gray-100 text-gray-900 px-8 py-3 rounded-lg font-medium hover:bg-gray-200 transition-all"
            >
              Li√™n h·ªá h·ªó tr·ª£
            </button>
            <button 
              onClick={() => window.location.href = '/'}
              className="bg-white text-gray-600 px-8 py-3 rounded-lg font-medium border hover:bg-gray-50 transition-all flex items-center justify-center"
            >
              <Home className="w-5 h-5 mr-2" />
              V·ªÅ trang ch·ªß
            </button>
          </div>

          {/* Support Info */}
          <div className="mt-8 p-4 bg-blue-50 border border-blue-200 rounded-lg">
            <p className="text-blue-800">
              üí¨ C·∫ßn h·ªó tr·ª£? Li√™n h·ªá hotline: <strong>1900-1234</strong> ho·∫∑c email: <strong>support@dochub.vn</strong>
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

// Main Component - Payment Result Router
const PaymentResultPage: React.FC = () => {
  const [pageType, setPageType] = useState<'success' | 'failed' | 'loading'>('loading');

  useEffect(() => {
    // Determine page type based on URL
    const path = window.location.pathname;
    if (path.includes('/subscription/success')) {
      setPageType('success');
    } else if (path.includes('/subscription/failed')) {
      setPageType('failed');
    } else {
      setPageType('success'); // Default to success for demo
    }
  }, []);

  if (pageType === 'loading') {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <Loader2 className="w-8 h-8 animate-spin text-blue-600" />
      </div>
    );
  }

  return pageType === 'success' ? <PaymentSuccessPage /> : <PaymentFailedPage />;
};

export default PaymentResultPage;